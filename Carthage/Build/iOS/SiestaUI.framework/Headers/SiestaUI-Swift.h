// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Siesta;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SiestaUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIView;
@class UIImage;
@class BOSService;
@class BOSResource;
@class NSCoder;

/// A <code>UIImageView</code> that asynchronously loads and displays remote images.
SWIFT_CLASS("_TtC8SiestaUI15RemoteImageView")
@interface RemoteImageView : UIImageView
/// Optional view to show while image is loading.
@property (nonatomic, weak) IBOutlet UIView * _Nullable loadingView;
/// Optional view to show if image is unavailable. Not shown while image is loading.
@property (nonatomic, weak) IBOutlet UIView * _Nullable alternateView;
/// Optional image to show if image is either unavailable or loading. Suppresses alternateView if non-nil.
@property (nonatomic, strong) UIImage * _Nullable placeholderImage;
/// The default service to cache <code>RemoteImageView</code> images.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) BOSService * _Nonnull defaultImageService;)
+ (BOSService * _Nonnull)defaultImageService SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultImageService:(BOSService * _Nonnull)value;
/// The service this view should use to request & cache its images.
@property (nonatomic, strong) BOSService * _Nonnull imageService;
/// A URL whose content is the image to display in this view.
@property (nonatomic, copy) NSString * _Nullable imageURL;
/// Optional image transform applyed to placeholderImage and downloaded image
@property (nonatomic, copy) UIImage * _Nullable (^ _Nonnull imageTransform)(UIImage * _Nullable);
/// A remote resource whose content is the image to display in this view.
/// If this image is already in memory, it is displayed synchronously (no flicker!). If the image is missing or
/// potentially stale, setting this property triggers a load.
@property (nonatomic, strong) BOSResource * _Nullable imageResource;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIButton;
@class NSBundle;
@class UIViewController;

/// A ready-made UI component to show an activity indicator and/or error message for a set of <code>Resource</code>s. Add this view
/// as an observer of one or more resources. You can add it to your view hierarchy yourself, or use <code>embedIn(_:)</code>
/// An overlay can be in exactly one of three states: <em>loading</em>, <em>success</em>, or <em>error</em>. It shows and hides child
/// views depending on which state itâ€™s in. The <code>displayPriority</code> property governs these states.
SWIFT_CLASS("_TtC8SiestaUI21ResourceStatusOverlay")
@interface ResourceStatusOverlay : UIView
/// A view that is visible in the loading and error states, and hidden in the success state.
@property (nonatomic, strong) IBOutlet UIView * _Nullable containerView;
/// A view that is visible in the loading state, and hidden in all other states.
@property (nonatomic, strong) IBOutlet UIView * _Nullable loadingIndicator;
/// A view that is visible in the error state, and hidden in all other states.
@property (nonatomic, strong) IBOutlet UIView * _Nullable errorView;
/// Displays a generic message stating that an error occurred. You can change the text of this label to taste.
@property (nonatomic, strong) IBOutlet UILabel * _Nullable errorHeadline;
/// Displays <code>RequestError.userMessage</code>.
@property (nonatomic, strong) IBOutlet UILabel * _Nullable errorDetail;
/// Allow user to retry a failed request.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified retryButton;
/// Creates a status overlay with the default layout.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create an overlay with a programmatic layout.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Create an overlay with a programmatic or serialized layout.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Populates a status overlay with your custom nib of choice. Your nib may bind as many or as few of the public
/// <code>@IBOutlet</code>s as it likes.
- (void)loadFromNib:(NSString * _Nonnull)nibName bundle:(NSBundle * _Nonnull)bundle;
/// Place this child inside the given view controllerâ€™s view, and position it so that it covers the entire bounds.
/// Be sure to call <code>positionToCoverParent()</code> from your <code>viewDidLayoutSubviews()</code> method.
- (nonnull instancetype)embedIn:(UIViewController * _Nonnull)parentViewController;
/// Repositions this view to conver the view controllerâ€™s content area. Has no effect unless this overlay was embedded
/// using <code>embedIn(_:)</code>.
- (void)positionToCoverParent;
/// Positions this overlay to exactly cover the given view. The two views do not have to be siblings; this method
/// works across the view hierarchy.
- (void)positionToCover:(UIView * _Nonnull)view;
/// Positions this view within its current superview so that it covers the given rect in the local coordinates of the
/// given view. Has no effect if the overlay has no superview.
- (void)positionToCover:(CGRect)rect inView:(UIView * _Nonnull)srcView;
/// Call <code>loadIfNeeded()</code> on any resources with errors that this overlay is observing.
- (void)retryFailedRequests;
/// Variant of <code>retryFailedRequests()</code> suitable for use as an IBOutlet. (The <code>sender</code> is ignored.)
- (IBAction)retryFailedRequests:(id _Nonnull)sender;
@end


@interface ResourceStatusOverlay (SWIFT_EXTENSION(SiestaUI)) <BOSResourceObserver>
- (void)resourceChanged:(BOSResource * _Nonnull)resource event:(NSString * _Nonnull)eventString;
@end


@interface ResourceStatusOverlay (SWIFT_EXTENSION(SiestaUI))
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull displayPriority;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
